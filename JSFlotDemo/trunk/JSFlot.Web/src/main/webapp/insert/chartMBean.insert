package org.jsflot.demo.managed;

import java.text.NumberFormat;

import javax.faces.component.UIComponent;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;

import org.jsflot.components.FlotChartRendererData;
import org.jsflot.xydata.XYDataList;
import org.jsflot.xydata.XYDataPoint;
import org.jsflot.xydata.XYDataSetCollection;
import org.mortbay.log.Log;

public class ChartMBean {
	
	private XYDataList series1DataList = new XYDataList();
	private XYDataList series2DataList = new XYDataList();
	private XYDataList series3DataList = new XYDataList();
	private int minX = 0;
	private int maxX = 10;
	private FlotChartRendererData chartData;
	
	public ChartMBean() {
		// TODO Auto-generated constructor stub
		chartData = new FlotChartRendererData();
		
		for (int i = 0; i <= 100; i++) {
			NumberFormat nf = NumberFormat.getNumberInstance();
			nf.setMaximumFractionDigits(3);
			
			series1DataList.addDataPoint(new XYDataPoint(i, Math.random() * 10));
			series2DataList.addDataPoint(new XYDataPoint(i, Math.random() * 10));
			series3DataList.addDataPoint(new XYDataPoint(i, Math.random() * 10));
		}
		series1DataList.setLabel("Series 1");
		series2DataList.setLabel("Series 2");
		series3DataList.setLabel("Series 3");
		
	}
	
	public XYDataSetCollection getChartSeries() {
		XYDataSetCollection collection = new XYDataSetCollection();
		XYDataList currentSeries1DataList = new XYDataList();
		XYDataList currentSeries2DataList = new XYDataList();
		XYDataList currentSeries3DataList = new XYDataList();
		
		for (int i = minX; i <= maxX; i++) {
			long startTime = 1196463600000l;
			if (chartData.getMode().equalsIgnoreCase("Time")) {
				XYDataPoint p1 = new XYDataPoint(series1DataList.get(i).getX(), series1DataList.get(i).getY());
				p1.setX(startTime + (p1.getX().doubleValue() * 1000 * 60 ));
				
				XYDataPoint p2 = new XYDataPoint(series2DataList.get(i).getX(), series2DataList.get(i).getY());
				p2.setX(startTime + (p2.getX().doubleValue() * 1000 * 60 ));
				
				XYDataPoint p3 = new XYDataPoint(series3DataList.get(i).getX(), series3DataList.get(i).getY());
				p3.setX(startTime + (p3.getX().doubleValue() * 1000 * 60 ));
				
				currentSeries1DataList.addDataPoint(p1);
				currentSeries2DataList.addDataPoint(p2);
				currentSeries3DataList.addDataPoint(p3);
			} else {
				currentSeries1DataList.addDataPoint(series1DataList.get(i));
				currentSeries2DataList.addDataPoint(series2DataList.get(i));
				currentSeries3DataList.addDataPoint(series3DataList.get(i));
			}
			
		}
		//Copy over the meta data for each series to the current viewed-series
		currentSeries1DataList.setLabel(series1DataList.getLabel());
		currentSeries1DataList.setFillLines(series1DataList.isFillLines());
		currentSeries1DataList.setMarkerPosition(series1DataList.getMarkerPosition());
		currentSeries1DataList.setMarkers(series1DataList.isMarkers());
		currentSeries1DataList.setShowDataPoints(series1DataList.isShowDataPoints());
		currentSeries1DataList.setShowLines(series1DataList.isShowLines());
		
		currentSeries2DataList.setLabel(series2DataList.getLabel());
		currentSeries2DataList.setFillLines(series2DataList.isFillLines());
		currentSeries2DataList.setMarkerPosition(series2DataList.getMarkerPosition());
		currentSeries2DataList.setMarkers(series2DataList.isMarkers());
		currentSeries2DataList.setShowDataPoints(series2DataList.isShowDataPoints());
		currentSeries2DataList.setShowLines(series2DataList.isShowLines());
		
		currentSeries3DataList.setLabel(series3DataList.getLabel());
		currentSeries3DataList.setFillLines(series3DataList.isFillLines());
		currentSeries3DataList.setMarkerPosition(series3DataList.getMarkerPosition());
		currentSeries3DataList.setMarkers(series3DataList.isMarkers());
		currentSeries3DataList.setShowDataPoints(series3DataList.isShowDataPoints());
		currentSeries3DataList.setShowLines(series3DataList.isShowLines());
		
		collection.addDataList(currentSeries1DataList);
		collection.addDataList(currentSeries2DataList);
		collection.addDataList(currentSeries3DataList);
		
		return collection;
	}
	
	public XYDataList getSeries1DataList() {
		return series1DataList;
	}
	
	public void setSeries1DataList(XYDataList series1DataList) {
		this.series1DataList = series1DataList;
	}
	
	public XYDataList getSeries2DataList() {
		return series2DataList;
	}
	
	public void setSeries2DataList(XYDataList series2DataList) {
		this.series2DataList = series2DataList;
	}
	
	public XYDataList getSeries3DataList() {
		return series3DataList;
	}
	
	public void setSeries3DataList(XYDataList series3DataList) {
		this.series3DataList = series3DataList;
	}

	public FlotChartRendererData getChartData() {
		return chartData;
	}
	
	public void setChartData(FlotChartRendererData chartData) {
		this.chartData = chartData;
	}

	public void chartDraggedListener(ValueChangeEvent event) {
		Log.info("chartDraggedListener called");
		double chartMoved = 0;
		String newValue = (String)event.getNewValue();
		String oldValue = (String)event.getOldValue();
		
		try {
			chartMoved = Double.parseDouble(newValue);
			
			if (chartData.getMode().equalsIgnoreCase("Time")) {
				chartMoved /= 60000;
			}
			
			//Move the chart according to the drag-motion
			minX += chartMoved;
			maxX += chartMoved;
			
			//Ensure that minX and maxX does not go out of bounds
			if (minX < 0) { minX = 0; maxX = 10; }
			if (maxX > 100) { maxX = 100; minX = 90;}
		} catch (NumberFormatException nfe) {
			nfe.printStackTrace();
			chartMoved = 0;
		}
	}
}
